<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++使用ios::out|ios::trunc存入数据失败！</title>
    <url>/2020/06/13/c-c-practice01/</url>
    <content><![CDATA[<p><strong>最近博主在学习完c++后开始自己做系统，其中发现一个问题困恼了我许久，在存数据到文件中发现我使用file(“file.txt”,ios::out|ios::trunc)；虽然程序没有报错，但是数据却没有存进去，文件也被清空了，里面的数据都没有了。<br>这让我百思不得其解，网上也没有这方面的答案。<br>解决方法:<br>查看程序，看程序是否在同一程序内同时使用了这个文件，把文件操作分开进行，这个问题就没有了。</strong></p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>-C/C++实战 -C/C++训练 -C/C++ -系统</tag>
      </tags>
  </entry>
  <entry>
    <title>C++数据库连接池项目</title>
    <url>/2020/06/13/c-c-practice02/</url>
    <content><![CDATA[<p>这个项目介绍了用C++语言实现MySQL数据库的连接池项目，包括项目功能点分析，功能设计，项目编码以及压力测试四个部分。项目代码量约400行，涉及了11个核心功能点，包括 MySQL数据库编程、单例模式、queue队列容器、C++11多线程编程、线程互斥、线程同步通信、unique_lock智能锁、基于CAS的原子整形、智能指针shared_ptr、lambda表达式、生产者-消费者线程模型。 </p>
<p>要求能够熟练C++语言、设计模式、智能指针和多线程编程、线程互斥、同步通信、生产者-消费者线程模型的综合应用，能提高知识的综合实践扩展能力。</p>
<p>编译环境：window10 Visual Studio 2019，需要加入mysql环境，MySQL版本为5.6</p>
<p>有任何问题请在下面评论，谢谢。</p>
<p>接下来直接上代码：</p>
<p>文件结构如下图：<br><img src="https://img-blog.csdnimg.cn/20201024143024496.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1cG1hbmE=,size_16,color_FFFFFF,t_70#pic_center" alt="项目结构"></p>
<h1 id="头文件代码如下："><a href="#头文件代码如下：" class="headerlink" title="头文件代码如下："></a>头文件代码如下：</h1><h2 id="1-CommonConnectionPool-h"><a href="#1-CommonConnectionPool-h" class="headerlink" title="1.CommonConnectionPool.h"></a>1.CommonConnectionPool.h</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"Connection.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"public.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/*实现连接池功能模块*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConnectionPool</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">static</span> ConnectionPool* <span class="title">GetConnectionPool</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="built_in">shared_ptr</span>&lt;Connection&gt; <span class="title">getConnection</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	ConnectionPool();</span><br><span class="line">	ConnectionPool(ConnectionPool&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">	ConnectionPool&amp; <span class="keyword">operator</span>=(ConnectionPool&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">loadConfigFile</span><span class="params">()</span></span>;<span class="comment">//加载数据库信息</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">produceConnectionTask</span><span class="params">()</span></span>;<span class="comment">//生产连接</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">scannerConnectionTask</span><span class="params">()</span></span>;<span class="comment">//扫描空闲连接并将其delete</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">string</span> _ip;<span class="comment">//数据库IP地址</span></span><br><span class="line">	<span class="keyword">unsigned</span> short _port;<span class="comment">//数据库端口，3306</span></span><br><span class="line">	<span class="built_in">string</span> username;<span class="comment">//连接数据的用户名</span></span><br><span class="line">	<span class="built_in">string</span> password;<span class="comment">//用户名的密码</span></span><br><span class="line">	<span class="built_in">string</span> _dbname;<span class="comment">//数据库名</span></span><br><span class="line">	<span class="keyword">int</span> _initSize;<span class="comment">//连接池的初始大小</span></span><br><span class="line">	<span class="keyword">int</span> _maxSize;<span class="comment">//连接池的最大连接数</span></span><br><span class="line">	<span class="keyword">int</span> _maxIdleTime;<span class="comment">//连接池的最大空闲时间</span></span><br><span class="line">	<span class="keyword">int</span> _connectionTimeout;<span class="comment">//获取数据库超时时间</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//保存数据库连接的容器</span></span><br><span class="line">	<span class="built_in">queue</span>&lt;Connection*&gt; _connectionQue;</span><br><span class="line">	<span class="comment">//保证容器线程安全的互斥锁</span></span><br><span class="line">	mutex _queueMutex;</span><br><span class="line">	<span class="comment">//设置条件变量，用于生产者与消费者的线程安全控制</span></span><br><span class="line">	condition_variable cv;</span><br><span class="line">	<span class="comment">//连接池中现有连接的数量</span></span><br><span class="line">	<span class="keyword">atomic_int</span> _connectionCnt;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="2-Connection-h"><a href="#2-Connection-h" class="headerlink" title="2.Connection.h"></a>2.Connection.h</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winsock.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mysql.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">实现MySQL数据库的操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">// 初始化数据库连接</span></span><br><span class="line">	Connection();</span><br><span class="line">	<span class="comment">// 释放数据库连接资源</span></span><br><span class="line">	~Connection();</span><br><span class="line">	<span class="comment">// 连接数据库</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">connect</span><span class="params">(<span class="built_in">string</span> ip,<span class="keyword">unsigned</span> short port,<span class="built_in">string</span> user,<span class="built_in">string</span> password,<span class="built_in">string</span> dbname)</span></span>;</span><br><span class="line">	<span class="comment">// 更新操作 insert、delete、update</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">update</span><span class="params">(<span class="built_in">string</span> sql)</span></span>;</span><br><span class="line">	<span class="comment">// 查询操作 select</span></span><br><span class="line">	<span class="function">MYSQL_RES* <span class="title">query</span><span class="params">(<span class="built_in">string</span> sql)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//刷新数据库的存活时间</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setAliveTime</span><span class="params">()</span> </span>&#123; _alivetime = clock(); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">clock_t</span> <span class="title">getAliveTime</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> _alivetime - clock(); &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	MYSQL* _conn; <span class="comment">// 表示和MySQL Server的一条连接</span></span><br><span class="line">	<span class="keyword">clock_t</span> _alivetime;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="3-pch-h"><a href="#3-pch-h" class="headerlink" title="3.pch.h"></a>3.pch.h</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 入门提示: </span></span><br><span class="line"><span class="comment">//   1. 使用解决方案资源管理器窗口添加/管理文件</span></span><br><span class="line"><span class="comment">//   2. 使用团队资源管理器窗口连接到源代码管理</span></span><br><span class="line"><span class="comment">//   3. 使用输出窗口查看生成输出和其他消息</span></span><br><span class="line"><span class="comment">//   4. 使用错误列表窗口查看错误</span></span><br><span class="line"><span class="comment">//   5. 转到“项目”&gt;“添加新项”以创建新的代码文件，或转到“项目”&gt;“添加现有项”以将现有代码文件添加到项目</span></span><br><span class="line"><span class="comment">//   6. 将来，若要再次打开此项目，请转到“文件”&gt;“打开”&gt;“项目”并选择 .sln 文件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> PCH_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PCH_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 添加要在此处预编译的标头</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//PCH_H</span></span></span><br></pre></td></tr></table></figure>

<h2 id="4-public-h"><a href="#4-public-h" class="headerlink" title="4.public.h"></a>4.public.h</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG(str) cout &lt;&lt; __FILE__ &lt;&lt; <span class="meta-string">":"</span> &lt;&lt; __LINE__&lt;&lt;<span class="meta-string">" "</span>&lt;&lt;__TIMESTAMP__&lt;&lt;<span class="meta-string">" : "</span>&lt;&lt; str &lt;&lt;endl;</span></span><br></pre></td></tr></table></figure>
<h1 id="源文件"><a href="#源文件" class="headerlink" title="源文件"></a>源文件</h1><h2 id="1-CommonConnectionPool-cpp"><a href="#1-CommonConnectionPool-cpp" class="headerlink" title="1.CommonConnectionPool.cpp"></a>1.CommonConnectionPool.cpp</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"CommonConnectionPool.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建连接池</span></span><br><span class="line"><span class="function">ConnectionPool* <span class="title">ConnectionPool::GetConnectionPool</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">static</span> ConnectionPool pool;</span><br><span class="line">	<span class="keyword">return</span> &amp;pool;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建初始线程</span></span><br><span class="line">ConnectionPool::ConnectionPool()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (!loadConfigFile())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//创初始连接池</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _initSize; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		Connection* p = <span class="keyword">new</span> Connection();</span><br><span class="line">		p-&gt;connect(_ip,_port,username,password,_dbname);</span><br><span class="line">		p-&gt;setAliveTime();</span><br><span class="line">		_connectionQue.push(p);</span><br><span class="line">		_connectionCnt++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//创建一个线程，负责产生连接</span></span><br><span class="line">	<span class="function">thread <span class="title">produce</span><span class="params">(bind(&amp;ConnectionPool::produceConnectionTask,<span class="keyword">this</span>))</span></span>;</span><br><span class="line">	produce.detach();</span><br><span class="line">	<span class="comment">//创建一个线程，对连接池中的元素进行扫描，空闲时间太大的delete</span></span><br><span class="line">	<span class="function">thread <span class="title">scanner</span><span class="params">(bind(&amp;ConnectionPool::scannerConnectionTask, <span class="keyword">this</span>))</span></span>;</span><br><span class="line">	scanner.detach();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载数据库配置</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ConnectionPool::loadConfigFile</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	FILE *pf = fopen(<span class="string">"mysql.ini"</span>,<span class="string">"r"</span>);</span><br><span class="line">	<span class="keyword">if</span> (pf == <span class="literal">nullptr</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		LOG(<span class="string">"mysql.ini file is not exist!"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (!feof(pf))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">char</span> line[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">		fgets(line , <span class="number">1024</span>, pf);</span><br><span class="line">		<span class="built_in">string</span> str = <span class="built_in">string</span>(line);</span><br><span class="line">		<span class="keyword">int</span> idx = str.find(<span class="string">"="</span>,<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">if</span> (idx == <span class="number">-1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> endidx = str.find(<span class="string">"\n"</span>, idx);</span><br><span class="line">		<span class="built_in">string</span> key = str.substr(<span class="number">0</span>, idx);</span><br><span class="line">		<span class="built_in">string</span> value = str.substr(idx + <span class="number">1</span>, endidx - idx - <span class="number">1</span>);</span><br><span class="line">		<span class="comment">//cout &lt;&lt; key &lt;&lt; ":" &lt;&lt; value &lt;&lt; endl;</span></span><br><span class="line">		<span class="keyword">if</span> (key == <span class="string">"ip"</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			_ip = value;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(key == <span class="string">"port"</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			_port = atoi(value.c_str());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (key == <span class="string">"username"</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			username = value;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (key == <span class="string">"password"</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			password = value;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (key == <span class="string">"dbname"</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			_dbname = value;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (key == <span class="string">"initSize"</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			_initSize = atoi(value.c_str());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (key == <span class="string">"maxSize"</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			_maxSize = atoi(value.c_str());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (key == <span class="string">"maxIdleTime"</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			_maxIdleTime = atoi(value.c_str());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (key == <span class="string">"connectionTimeout"</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			_connectionTimeout = atoi(value.c_str());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产连接</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ConnectionPool::produceConnectionTask</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="function">unique_lock&lt;mutex&gt; <span class="title">lck</span><span class="params">(_queueMutex)</span></span>;</span><br><span class="line">		<span class="comment">//如果连接池里还有元素，则等待，不产生元素直到连接池为空</span></span><br><span class="line">		<span class="keyword">while</span> (!_connectionQue.empty())</span><br><span class="line">		&#123;</span><br><span class="line">			cv.wait(lck);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//产生元素并判断元素是否大于连接池最大连接数</span></span><br><span class="line">		<span class="keyword">if</span> (_connectionCnt &lt; _maxSize)</span><br><span class="line">		&#123;</span><br><span class="line">			Connection* cp = <span class="keyword">new</span> Connection();</span><br><span class="line">			cp-&gt;connect(_ip, _port, username, password, _dbname);</span><br><span class="line">			cp-&gt;setAliveTime();</span><br><span class="line">			_connectionQue.push(cp);</span><br><span class="line">			_connectionCnt++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//产生元素成功，通知消费者消费</span></span><br><span class="line">		cv.notify_all();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取连接</span></span><br><span class="line"><span class="function"><span class="built_in">shared_ptr</span>&lt;Connection&gt; <span class="title">ConnectionPool::getConnection</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(_queueMutex)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (_connectionQue.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//判断是否是因连接超时而导致程序被唤醒</span></span><br><span class="line">		<span class="keyword">if</span> (cv_status::timeout == cv.wait_for(lock, chrono::milliseconds(_connectionTimeout)))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (_connectionQue.empty())</span><br><span class="line">			&#123;</span><br><span class="line">				LOG(<span class="string">"数据库连接超时！"</span>);</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//从连接池中拿一个元素出来，并重新定义其析构，当该智能指针被释放时应放入连接池中而不是delete</span></span><br><span class="line">	<span class="built_in">shared_ptr</span> &lt;Connection&gt; cp(_connectionQue.front(), [&amp;](Connection* conn) &#123;unique_lock&lt;mutex&gt; lock(_queueMutex); conn-&gt;setAliveTime(); _connectionQue.push(conn); &#125;);</span><br><span class="line">	_connectionQue.pop();</span><br><span class="line">	cv.notify_all();</span><br><span class="line">	<span class="keyword">return</span> cp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//扫描空闲连接并将其delete</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ConnectionPool::scannerConnectionTask</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		this_thread::sleep_for(chrono::seconds(_maxSize));</span><br><span class="line">		<span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(_queueMutex)</span></span>;</span><br><span class="line">		<span class="keyword">while</span> (_connectionCnt &gt; _initSize)</span><br><span class="line">		&#123;</span><br><span class="line">			Connection* p = _connectionQue.front();</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (p-&gt;getAliveTime() &gt;=(_maxIdleTime*<span class="number">1000</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				_connectionQue.pop();</span><br><span class="line">				_connectionCnt--;</span><br><span class="line">				<span class="keyword">delete</span> p;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-Connection-cpp"><a href="#2-Connection-cpp" class="headerlink" title="2.Connection.cpp"></a>2.Connection.cpp</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"pch.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"public.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Connection.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">Connection::Connection()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 初始化数据库连接</span></span><br><span class="line">	_conn = mysql_init(<span class="literal">nullptr</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Connection::~Connection()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 释放数据库连接资源</span></span><br><span class="line">	<span class="keyword">if</span> (_conn != <span class="literal">nullptr</span>)</span><br><span class="line">		mysql_close(_conn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Connection::connect</span><span class="params">(<span class="built_in">string</span> ip, <span class="keyword">unsigned</span> short port,<span class="built_in">string</span> username, <span class="built_in">string</span> password, <span class="built_in">string</span> dbname)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 连接数据库</span></span><br><span class="line">	MYSQL* p = mysql_real_connect(_conn, ip.c_str(), username.c_str(),</span><br><span class="line">		password.c_str(), dbname.c_str(), port, <span class="literal">nullptr</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">return</span> p != <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Connection::update</span><span class="params">(<span class="built_in">string</span> sql)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 更新操作 insert、delete、update</span></span><br><span class="line">	<span class="keyword">if</span> (mysql_query(_conn, sql.c_str()))</span><br><span class="line">	&#123;</span><br><span class="line">		LOG(<span class="string">"更新失败:"</span> + sql);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">MYSQL_RES* <span class="title">Connection::query</span><span class="params">(<span class="built_in">string</span> sql)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 查询操作 select</span></span><br><span class="line">	<span class="keyword">if</span> (mysql_query(_conn, sql.c_str()))</span><br><span class="line">	&#123;</span><br><span class="line">		LOG(<span class="string">"查询失败:"</span> + sql);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> mysql_use_result(_conn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-mian-cpp"><a href="#3-mian-cpp" class="headerlink" title="3.mian.cpp"></a>3.mian.cpp</h2><p>使用多线程和单线程分别使用连接池做测试</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"pch.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Connection.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CommonConnectionPool.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//Connection conn;</span></span><br><span class="line">	<span class="comment">//conn.connect("127.0.0.1", 3306, "root", "123456", "chat");</span></span><br><span class="line">	<span class="keyword">clock_t</span> begin = clock();</span><br><span class="line">	<span class="function">thread <span class="title">t1</span><span class="params">([]() &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2500</span>; i++)</span></span></span><br><span class="line"><span class="function"><span class="params">		&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="comment">/*Connection conn;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">			char sql[1024] = &#123; 0 &#125;;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">			sprintf(sql, "insert into user(name,age,sex) values('%s',%d,'%s')", "zhouli", 21, "male");</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">			conn.connect("127.0.0.1", 3306, "root", "123456", "chat");</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">			conn.update(sql);*/</span></span></span></span><br><span class="line"><span class="function"><span class="params">			ConnectionPool* cp = ConnectionPool::GetConnectionPool();</span></span></span><br><span class="line"><span class="function"><span class="params">			</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="built_in">shared_ptr</span>&lt;Connection&gt; conn = cp-&gt;getConnection();</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="keyword">char</span> sql[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="built_in">sprintf</span>(sql, <span class="string">"insert into user(name,age,sex) values('%s',%d,'%s')"</span>, <span class="string">"zhouli"</span>, <span class="number">21</span>, <span class="string">"male"</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="comment">//conn-&gt;connect("127.0.0.1", 3306, "root", "123456", "chat");</span></span></span></span><br><span class="line"><span class="function"><span class="params">			conn-&gt;update(sql);</span></span></span><br><span class="line"><span class="function"><span class="params">			</span></span></span><br><span class="line"><span class="function"><span class="params">		&#125;</span></span></span><br><span class="line"><span class="function"><span class="params">		&#125;)</span></span>;</span><br><span class="line">	<span class="function">thread <span class="title">t2</span><span class="params">([]() &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2500</span>; i++)</span></span></span><br><span class="line"><span class="function"><span class="params">		&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="comment">/*Connection conn;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">			char sql[1024] = &#123; 0 &#125;;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">			sprintf(sql, "insert into user(name,age,sex) values('%s',%d,'%s')", "zhouli", 21, "male");</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">			conn.connect("127.0.0.1", 3306, "root", "123456", "chat");</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">			conn.update(sql);*/</span></span></span></span><br><span class="line"><span class="function"><span class="params">			ConnectionPool* cp = ConnectionPool::GetConnectionPool();</span></span></span><br><span class="line"><span class="function"><span class="params">			</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="built_in">shared_ptr</span>&lt;Connection&gt; conn = cp-&gt;getConnection();</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="keyword">char</span> sql[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="built_in">sprintf</span>(sql, <span class="string">"insert into user(name,age,sex) values('%s',%d,'%s')"</span>, <span class="string">"zhouli"</span>, <span class="number">21</span>, <span class="string">"male"</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="comment">//conn-&gt;connect("127.0.0.1", 3306, "root", "123456", "chat");</span></span></span></span><br><span class="line"><span class="function"><span class="params">			conn-&gt;update(sql);</span></span></span><br><span class="line"><span class="function"><span class="params">			</span></span></span><br><span class="line"><span class="function"><span class="params">		&#125;</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;)</span></span>;</span><br><span class="line">	<span class="function">thread <span class="title">t3</span><span class="params">([]() &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2500</span>; i++)</span></span></span><br><span class="line"><span class="function"><span class="params">		&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="comment">/*Connection conn;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">			char sql[1024] = &#123; 0 &#125;;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">			sprintf(sql, "insert into user(name,age,sex) values('%s',%d,'%s')", "zhouli", 21, "male");</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">			conn.connect("127.0.0.1", 3306, "root", "123456", "chat");</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">			conn.update(sql);*/</span></span></span></span><br><span class="line"><span class="function"><span class="params">			ConnectionPool* cp = ConnectionPool::GetConnectionPool();</span></span></span><br><span class="line"><span class="function"><span class="params">			</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="built_in">shared_ptr</span>&lt;Connection&gt; conn = cp-&gt;getConnection();</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="keyword">char</span> sql[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="built_in">sprintf</span>(sql, <span class="string">"insert into user(name,age,sex) values('%s',%d,'%s')"</span>, <span class="string">"zhouli"</span>, <span class="number">21</span>, <span class="string">"male"</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="comment">//conn-&gt;connect("127.0.0.1", 3306, "root", "123456", "chat");</span></span></span></span><br><span class="line"><span class="function"><span class="params">			conn-&gt;update(sql);</span></span></span><br><span class="line"><span class="function"><span class="params">			</span></span></span><br><span class="line"><span class="function"><span class="params">		&#125;</span></span></span><br><span class="line"><span class="function"><span class="params">		&#125;)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">thread <span class="title">t4</span><span class="params">([]() &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2500</span>; i++)</span></span></span><br><span class="line"><span class="function"><span class="params">		&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="comment">/*Connection conn;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">			char sql[1024] = &#123; 0 &#125;;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">			sprintf(sql, "insert into user(name,age,sex) values('%s',%d,'%s')", "zhouli", 21, "male");</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">			conn.connect("127.0.0.1", 3306, "root", "123456", "chat");</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">			conn.update(sql);*/</span></span></span></span><br><span class="line"><span class="function"><span class="params">			ConnectionPool* cp = ConnectionPool::GetConnectionPool();</span></span></span><br><span class="line"><span class="function"><span class="params">			</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="built_in">shared_ptr</span>&lt;Connection&gt; conn = cp-&gt;getConnection();</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="keyword">char</span> sql[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="built_in">sprintf</span>(sql, <span class="string">"insert into user(name,age,sex) values('%s',%d,'%s')"</span>, <span class="string">"zhouli"</span>, <span class="number">21</span>, <span class="string">"male"</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="comment">//conn-&gt;connect("127.0.0.1", 3306, "root", "123456", "chat");</span></span></span></span><br><span class="line"><span class="function"><span class="params">			conn-&gt;update(sql);</span></span></span><br><span class="line"><span class="function"><span class="params">			</span></span></span><br><span class="line"><span class="function"><span class="params">		&#125;</span></span></span><br><span class="line"><span class="function"><span class="params">		&#125;)</span></span>;</span><br><span class="line"></span><br><span class="line">	t1.join();</span><br><span class="line">	t2.join();</span><br><span class="line">	t3.join();</span><br><span class="line">	t4.join();</span><br><span class="line">	<span class="keyword">clock_t</span> end = clock();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; end - begin &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">	ConnectionPool* cp = ConnectionPool::GetConnectionPool();</span><br><span class="line">	<span class="keyword">clock_t</span> begin = clock();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">shared_ptr</span>&lt;Connection&gt; conn = cp-&gt;getConnection();</span><br><span class="line">		<span class="keyword">char</span> sql[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">		<span class="built_in">sprintf</span>(sql, <span class="string">"insert into user(name,age,sex) values('%s',%d,'%s')"</span>, <span class="string">"zhouli"</span>, <span class="number">21</span>, <span class="string">"male"</span>);</span><br><span class="line">		<span class="comment">//conn-&gt;connect("127.0.0.1", 3306, "root", "123456", "chat");</span></span><br><span class="line">		conn-&gt;update(sql);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">clock_t</span> end = clock();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; end - begin&lt;&lt;<span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//cp-&gt;loadConfigFile();</span></span><br><span class="line"></span><br><span class="line">	Connection conn;</span><br><span class="line">	<span class="keyword">char</span> sql[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="built_in">sprintf</span>(sql,<span class="string">"insert into user(name,age,sex) values('%s',%d,'%s')"</span>,<span class="string">"zhouli"</span>,<span class="number">21</span>,<span class="string">"male"</span>);</span><br><span class="line">	conn.connect(<span class="string">"127.0.0.1"</span>,<span class="number">3306</span>,<span class="string">"root"</span>,<span class="string">"123456"</span>,<span class="string">"chat"</span>);</span><br><span class="line">	conn.update(sql);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-mysql-ini"><a href="#4-mysql-ini" class="headerlink" title="4 mysql.ini"></a>4 mysql.ini</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">#保存数据库的信息</span><br><span class="line"></span><br><span class="line">ip=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">port=<span class="number">3306</span></span><br><span class="line">username=root</span><br><span class="line">password=<span class="number">123456</span></span><br><span class="line">dbname=chat</span><br><span class="line">initSize=<span class="number">10</span></span><br><span class="line">maxSize=<span class="number">1024</span></span><br><span class="line">maxIdleTime=<span class="number">60</span></span><br><span class="line">connectionTimeout=<span class="number">100</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>-C/C++实战</tag>
      </tags>
  </entry>
  <entry>
    <title>职工管理系统</title>
    <url>/2020/06/11/hello-world/</url>
    <content><![CDATA[<p>我们在入门C++后都会自己设计一个系统，来检验自己的c++基础是否牢固。而博主最近在某站上跟着黑马一起看视频学习c++，其中有个职员管理系统，博主也跟着敲了一下，接下来让我们一起来看看程序吧。</p>
<p>在设计一个系统之前我们应该思考系统的结构，系统的功能以及客户的需求等等。我设计的这个系统有以下功能：添加职员信息，查询职员信息，删除职员信息，修改职员信息，显示职员信息，排序，退出以及清空数据。</p>
<p>接下来直接上代码：</p>
<p>下面展示 文件存放目录。</p>
<p><img src="/images/head.png" alt="alt"></p>
<h2 id="头文件展示"><a href="#头文件展示" class="headerlink" title="头文件展示"></a>头文件展示</h2><h3 id="boss-h文件"><a href="#boss-h文件" class="headerlink" title="boss.h文件"></a>boss.h文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ // An highlighted block</span><br><span class="line"><span class="comment">#pragma once</span></span><br><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string&gt;</span></span><br><span class="line"><span class="comment">#include "worker.h"</span></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class boss:public worker</span><br><span class="line">&#123;</span><br><span class="line">	public:</span><br><span class="line">		boss(int num,string name,int id);</span><br><span class="line">		virtual void show();</span><br><span class="line">		virtual string get_id();</span><br><span class="line">		</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="manage-h文件"><a href="#manage-h文件" class="headerlink" title="manage.h文件"></a>manage.h文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ // An highlighted block</span><br><span class="line"><span class="comment">#pragma once</span></span><br><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string&gt;</span></span><br><span class="line"><span class="comment">#include "worker.h"</span></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class manage:public worker</span><br><span class="line">&#123;</span><br><span class="line">	public:</span><br><span class="line">		manage(int num,string name,int id);</span><br><span class="line">		virtual void show();</span><br><span class="line">		virtual string get_id();</span><br><span class="line">		</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="employee-h文件"><a href="#employee-h文件" class="headerlink" title="employee.h文件"></a>employee.h文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ // An highlighted block</span><br><span class="line"><span class="comment">#pragma once</span></span><br><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string&gt;</span></span><br><span class="line"><span class="comment">#include "worker.h"</span></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class employee:public worker</span><br><span class="line">&#123;</span><br><span class="line">	public:</span><br><span class="line">		employee(int num,string name,int id);</span><br><span class="line">		virtual void show();</span><br><span class="line">		virtual string get_id();</span><br><span class="line">		</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="workmanage-h文件"><a href="#workmanage-h文件" class="headerlink" title="workmanage.h文件"></a>workmanage.h文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ // An highlighted block</span><br><span class="line"><span class="comment">#pragma once</span></span><br><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string&gt;</span></span><br><span class="line"><span class="comment">#include &lt;fstream&gt;</span></span><br><span class="line"><span class="comment">#include "worker.h"</span></span><br><span class="line"><span class="comment">#include "employee.h"</span></span><br><span class="line"><span class="comment">#include "manage.h"</span></span><br><span class="line"><span class="comment">#include "boss.h"</span></span><br><span class="line"><span class="comment">#define FILENAME "empFile.txt"</span></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class workmanage</span><br><span class="line">&#123;</span><br><span class="line">	public:</span><br><span class="line">		void show_menu();</span><br><span class="line">		void exit_xt();</span><br><span class="line">		void add_xt();</span><br><span class="line">		void show_xt();</span><br><span class="line">		void save_xt();</span><br><span class="line">		void read_xt();</span><br><span class="line">		void get_num();</span><br><span class="line">		void sort_xt();</span><br><span class="line">		void clear_xt();</span><br><span class="line">		void find_xt();</span><br><span class="line">		void delete_xt(); </span><br><span class="line">		void update_xt(); </span><br><span class="line">		workmanage();</span><br><span class="line">		~workmanage();</span><br><span class="line">		</span><br><span class="line">		int sum;</span><br><span class="line">		worker **m_array;</span><br><span class="line">		bool m_file;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure>


<h3 id="worker-h文件"><a href="#worker-h文件" class="headerlink" title="worker.h文件"></a>worker.h文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ // An highlighted block</span><br><span class="line"><span class="comment">#pragma once</span></span><br><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class worker</span><br><span class="line">&#123;</span><br><span class="line">	public:</span><br><span class="line">		virtual void show()=0;</span><br><span class="line">		virtual string get_id()=0;</span><br><span class="line">		virtual ~worker();</span><br><span class="line">		</span><br><span class="line">		int m_num;</span><br><span class="line">		string m_name;</span><br><span class="line">		int m_id;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="源文件展示"><a href="#源文件展示" class="headerlink" title="源文件展示"></a>源文件展示</h2><h3 id="boss-cpp文件"><a href="#boss-cpp文件" class="headerlink" title="boss.cpp文件"></a>boss.cpp文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$// An highlighted block</span><br><span class="line"><span class="comment">#include "boss.h"</span></span><br><span class="line">/* run this program using the console pauser or add your own getch, system(<span class="string">"pause"</span>) or input loop */</span><br><span class="line"></span><br><span class="line">	boss::boss(int num,string name,int id)</span><br><span class="line">	&#123;</span><br><span class="line">		this-&gt;m_num=num;</span><br><span class="line">		this-&gt;m_name=name;</span><br><span class="line">		this-&gt;m_id=id;</span><br><span class="line">	&#125;</span><br><span class="line">	void boss::show()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">"职工编号："</span>&lt;&lt; this-&gt;m_num </span><br><span class="line">			 &lt;&lt;<span class="string">"\t职工姓名："</span>&lt;&lt;this-&gt;m_name</span><br><span class="line">			 &lt;&lt;<span class="string">"\t职工部门："</span>&lt;&lt;this-&gt;get_id()</span><br><span class="line">			 &lt;&lt;endl; </span><br><span class="line">	&#125;</span><br><span class="line">	string boss::get_id()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">return</span> string(<span class="string">"老板"</span>); </span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="manage-cpp文件"><a href="#manage-cpp文件" class="headerlink" title="manage.cpp文件"></a>manage.cpp文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ // An highlighted block</span><br><span class="line"><span class="comment">#include "manage.h"</span></span><br><span class="line">/* run this program using the console pauser or add your own getch, system(<span class="string">"pause"</span>) or input loop */</span><br><span class="line"></span><br><span class="line">	manage::manage(int num,string name,int id)</span><br><span class="line">	&#123;</span><br><span class="line">		this-&gt;m_num=num;</span><br><span class="line">		this-&gt;m_name=name;</span><br><span class="line">		this-&gt;m_id=id;</span><br><span class="line">	&#125;</span><br><span class="line">	void manage::show()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">"职工编号："</span>&lt;&lt; this-&gt;m_num </span><br><span class="line">			 &lt;&lt;<span class="string">"\t职工姓名："</span>&lt;&lt;this-&gt;m_name</span><br><span class="line">			 &lt;&lt;<span class="string">"\t职工部门："</span>&lt;&lt;this-&gt;get_id()</span><br><span class="line">			 &lt;&lt;endl; </span><br><span class="line">	&#125;</span><br><span class="line">	string manage::get_id()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">return</span> string(<span class="string">"经理"</span>); </span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="employee-cpp文件"><a href="#employee-cpp文件" class="headerlink" title="employee.cpp文件"></a>employee.cpp文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ // An highlighted block</span><br><span class="line"><span class="comment">#include "employee.h"</span></span><br><span class="line">/* run this program using the console pauser or add your own getch, system(<span class="string">"pause"</span>) or input loop */</span><br><span class="line"></span><br><span class="line">	employee::employee(int num,string name,int id)</span><br><span class="line">	&#123;</span><br><span class="line">		this-&gt;m_num=num;</span><br><span class="line">		this-&gt;m_name=name;</span><br><span class="line">		this-&gt;m_id=id;</span><br><span class="line">	&#125;</span><br><span class="line">	void employee::show()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">"职工编号："</span>&lt;&lt; this-&gt;m_num </span><br><span class="line">			 &lt;&lt;<span class="string">"\t职工姓名："</span>&lt;&lt;this-&gt;m_name</span><br><span class="line">			 &lt;&lt;<span class="string">"\t职工部门："</span>&lt;&lt;this-&gt;get_id()</span><br><span class="line">			 &lt;&lt;endl; </span><br><span class="line">	&#125;</span><br><span class="line">	string employee::get_id()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">return</span> string(<span class="string">"普通职工"</span>); </span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h3 id="main-cpp文件"><a href="#main-cpp文件" class="headerlink" title="main.cpp文件"></a>main.cpp文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ // An highlighted block</span><br><span class="line"><span class="comment">#include "boss.h"</span></span><br><span class="line"><span class="comment">#include "employee.h"</span></span><br><span class="line"><span class="comment">#include "manage.h"</span></span><br><span class="line"><span class="comment">#include "worker.h"</span></span><br><span class="line"><span class="comment">#include "workmanage.h"</span></span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int ch;</span><br><span class="line">	workmanage wm;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(1)</span><br><span class="line">	&#123;</span><br><span class="line">	wm.show_menu();</span><br><span class="line">	cout &lt;&lt; <span class="string">"请输入要进行的操作："</span>;</span><br><span class="line">	cin &gt;&gt; ch;</span><br><span class="line">	switch(ch)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">case</span> 1:wm.add_xt();<span class="built_in">break</span>;</span><br><span class="line">		<span class="keyword">case</span> 2:wm.show_xt();<span class="built_in">break</span>;</span><br><span class="line">		<span class="keyword">case</span> 3:wm.delete_xt();<span class="built_in">break</span>;</span><br><span class="line">		<span class="keyword">case</span> 4:wm.update_xt();<span class="built_in">break</span>;</span><br><span class="line">		<span class="keyword">case</span> 5:wm.sort_xt();<span class="built_in">break</span>;</span><br><span class="line">		<span class="keyword">case</span> 6:wm.clear_xt();<span class="built_in">break</span>;</span><br><span class="line">		<span class="keyword">case</span> 7:wm.find_xt();<span class="built_in">break</span>;</span><br><span class="line">		<span class="keyword">case</span> 0:wm.exit_xt();<span class="built_in">break</span>;</span><br><span class="line">		default:cout &lt;&lt;<span class="string">"输入错误！"</span>&lt;&lt;endl;</span><br><span class="line">	 &#125;</span><br><span class="line">	 system(<span class="string">"pause"</span>);</span><br><span class="line">	 system(<span class="string">"cls"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="workmanage-cpp文件"><a href="#workmanage-cpp文件" class="headerlink" title="workmanage.cpp文件"></a>workmanage.cpp文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ // An highlighted block</span><br><span class="line"><span class="comment">#include "workmanage.h"</span></span><br><span class="line"></span><br><span class="line">workmanage::<span class="function"><span class="title">workmanage</span></span>()&#123;</span><br><span class="line">	fstream file;</span><br><span class="line">	char ch;</span><br><span class="line">	</span><br><span class="line">	file.open(FILENAME,ios::<span class="keyword">in</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(!file.is_open())</span><br><span class="line">	&#123;</span><br><span class="line">		this-&gt;sum=0;</span><br><span class="line">		this-&gt;m_array=NULL;</span><br><span class="line">		this-&gt;m_file=<span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;	</span><br><span class="line">		file &gt;&gt; ch; </span><br><span class="line">		<span class="keyword">if</span>(file.eof())</span><br><span class="line">		&#123;</span><br><span class="line">			this-&gt;sum=0;</span><br><span class="line">			this-&gt;m_array=NULL;</span><br><span class="line">			this-&gt;m_file=<span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			int i=0;</span><br><span class="line">			this-&gt;get_num();</span><br><span class="line">			this-&gt;m_array=new worker * [this-&gt;sum];</span><br><span class="line"> 			int num,id;</span><br><span class="line"> 			string name;</span><br><span class="line">			file.seekg(0);</span><br><span class="line">		 	<span class="keyword">while</span>(file&gt;&gt;num&amp;&amp;file&gt;&gt;name&amp;&amp;file&gt;&gt;id)</span><br><span class="line">		 	&#123;</span><br><span class="line">		 		worker *wk=NULL;</span><br><span class="line">		 				</span><br><span class="line">				 switch(id)</span><br><span class="line">				 &#123;</span><br><span class="line">				 	<span class="keyword">case</span> 1:wk=new boss(num,name,id);<span class="built_in">break</span>;</span><br><span class="line">				 	<span class="keyword">case</span> 2:wk=new manage(num,name,id);<span class="built_in">break</span>;</span><br><span class="line">				 	<span class="keyword">case</span> 3:wk=new employee(num,name,id);<span class="built_in">break</span>;</span><br><span class="line">				 	default:cout &lt;&lt;<span class="string">"读取数据错误！"</span>&lt;&lt;endl; </span><br><span class="line">				 &#125;</span><br><span class="line">				</span><br><span class="line">				 this-&gt;m_array[i]=wk;</span><br><span class="line">				 i++;</span><br><span class="line">			 &#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	file.close(); </span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">workmanage::~workmanage()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(this-&gt;m_array!=NULL)</span><br><span class="line">	&#123;</span><br><span class="line">		delete[] m_array;</span><br><span class="line">		this-&gt;m_array=NULL;</span><br><span class="line">	 &#125; </span><br><span class="line">&#125;</span><br><span class="line">void workmanage::show_menu()</span><br><span class="line"> &#123;</span><br><span class="line"> 	cout &lt;&lt;<span class="string">"--------------------------------------------------"</span>&lt;&lt;endl;	</span><br><span class="line"> 	cout &lt;&lt;<span class="string">"-------------------欢迎光临-----------------------"</span>&lt;&lt;endl;	</span><br><span class="line"> 	cout &lt;&lt;<span class="string">"---------------1.增加职工人数---------------------"</span>&lt;&lt;endl;	</span><br><span class="line"> 	cout &lt;&lt;<span class="string">"---------------2.显示职工信息---------------------"</span>&lt;&lt;endl;	</span><br><span class="line"> 	cout &lt;&lt;<span class="string">"---------------3.删除职工信息---------------------"</span>&lt;&lt;endl;	</span><br><span class="line"> 	cout &lt;&lt;<span class="string">"---------------4.修改职工信息---------------------"</span>&lt;&lt;endl;	</span><br><span class="line"> 	cout &lt;&lt;<span class="string">"---------------5.职工信息排序---------------------"</span>&lt;&lt;endl;	</span><br><span class="line"> 	cout &lt;&lt;<span class="string">"---------------6.清空职工信息---------------------"</span>&lt;&lt;endl;	</span><br><span class="line"> 	cout &lt;&lt;<span class="string">"---------------7.查找职工信息---------------------"</span>&lt;&lt;endl;	</span><br><span class="line"> 	cout &lt;&lt;<span class="string">"---------------0.退出系统-------------------------"</span>&lt;&lt;endl;	</span><br><span class="line"> 	cout &lt;&lt;<span class="string">"--------------------------------------------------"</span>&lt;&lt;endl;		</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> void workmanage::exit_xt()</span><br><span class="line"> &#123;</span><br><span class="line"> 	<span class="built_in">exit</span>(0);</span><br><span class="line"> 	system(<span class="string">"pause"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> void workmanage::add_xt()</span><br><span class="line"> &#123;</span><br><span class="line"> 	int ch=0,i,num,id;</span><br><span class="line">	string name;  </span><br><span class="line"> 	cout&lt;&lt;<span class="string">"请输入要增加的职工人数："</span>;</span><br><span class="line"> 	cin &gt;&gt; ch;</span><br><span class="line"> 	</span><br><span class="line"> 	worker **array=new worker*[this-&gt;sum+ch];</span><br><span class="line"> 	<span class="keyword">if</span>(this-&gt;m_array!=NULL)</span><br><span class="line">	 &#123;</span><br><span class="line">	 	<span class="keyword">for</span>(i=0;i&lt;this-&gt;sum;i++)</span><br><span class="line">	 	&#123;</span><br><span class="line">	 		array[i]=this-&gt;m_array[i];</span><br><span class="line">		 &#125;</span><br><span class="line">	&#125;</span><br><span class="line"> 	<span class="keyword">for</span>(i=0;i&lt;ch;i++)</span><br><span class="line"> 	&#123;</span><br><span class="line"> 		cout &lt;&lt;<span class="string">"请输入第"</span>&lt;&lt;i+1&lt;&lt;<span class="string">"个的职工编号："</span>;</span><br><span class="line">		cin &gt;&gt;  num;</span><br><span class="line">		</span><br><span class="line">		cout &lt;&lt;<span class="string">"请输入第"</span>&lt;&lt;i+1&lt;&lt;<span class="string">"个的职工姓名："</span>;</span><br><span class="line">		cin &gt;&gt;  name;</span><br><span class="line">		</span><br><span class="line">		cout &lt;&lt;<span class="string">"请输入第"</span>&lt;&lt;i+1&lt;&lt;<span class="string">"个的职工部门："</span>&lt;&lt;endl;</span><br><span class="line">		cout &lt;&lt;<span class="string">"1. 老板"</span>&lt;&lt;endl;</span><br><span class="line">		cout &lt;&lt;<span class="string">"2. 经理"</span>&lt;&lt;endl;</span><br><span class="line">		cout &lt;&lt;<span class="string">"3. 普通员工"</span>&lt;&lt;endl;</span><br><span class="line">		cin &gt;&gt;  id;</span><br><span class="line">		</span><br><span class="line">		worker *wk=NULL;</span><br><span class="line">		switch(id)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">case</span> 1:wk=new boss(num,name,id);<span class="built_in">break</span>;</span><br><span class="line">			<span class="keyword">case</span> 2:wk=new manage(num,name,id);<span class="built_in">break</span>;</span><br><span class="line">			<span class="keyword">case</span> 3:wk=new employee(num,name,id);<span class="built_in">break</span>;</span><br><span class="line">			default: cout&lt;&lt;<span class="string">"输入错误！"</span>&lt;&lt;endl;<span class="built_in">return</span>;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">			</span><br><span class="line"> 		array[this-&gt;sum+i]=wk;</span><br><span class="line">	 &#125;</span><br><span class="line">	 delete[] this-&gt;m_array;</span><br><span class="line">	 this-&gt;m_array=array;</span><br><span class="line">	 this-&gt;sum=this-&gt;sum+ch;</span><br><span class="line">	 this-&gt;save_xt();</span><br><span class="line">	 cout &lt;&lt;<span class="string">"添加完毕！"</span>&lt;&lt;endl;</span><br><span class="line">	 </span><br><span class="line"> 	</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> void workmanage::show_xt()</span><br><span class="line"> &#123;</span><br><span class="line"> 	int i;</span><br><span class="line"> 	//this-&gt;read_xt();</span><br><span class="line"> 	<span class="keyword">for</span>(i=0;i&lt;this-&gt;sum;i++)</span><br><span class="line"> 	&#123;</span><br><span class="line"> 	 this-&gt;m_array[i]-&gt;show();</span><br><span class="line"> 	&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> void workmanage::save_xt()</span><br><span class="line"> &#123;</span><br><span class="line"> 	ofstream file;</span><br><span class="line"> 	int i;</span><br><span class="line"> 	file.open(FILENAME,ios::out);</span><br><span class="line"> 	<span class="keyword">if</span>(!file.is_open())</span><br><span class="line"> 	&#123;</span><br><span class="line"> 		cout&lt;&lt;<span class="string">"文件打开失败！"</span>&lt;&lt;endl;</span><br><span class="line"> 		<span class="built_in">return</span>;</span><br><span class="line">	 &#125;</span><br><span class="line">	 </span><br><span class="line">	 <span class="keyword">for</span>(i=0;i&lt;this-&gt;sum;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>( this-&gt;m_array[i]!=NULL)</span><br><span class="line">			&#123;</span><br><span class="line">			file &lt;&lt; this-&gt;m_array[i]-&gt;m_num &lt;&lt; <span class="string">' '</span></span><br><span class="line">				 &lt;&lt; this-&gt;m_array[i]-&gt;m_name &lt;&lt; <span class="string">' '</span></span><br><span class="line">			 	 &lt;&lt; this-&gt;m_array[i]-&gt;m_id &lt;&lt; endl;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		file.close();</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> void workmanage::read_xt()</span><br><span class="line"> &#123;</span><br><span class="line"> 	ifstream file;</span><br><span class="line"> 	int i=0;</span><br><span class="line"> 	int num,id;</span><br><span class="line"> 	string name;</span><br><span class="line"> 	file.open(FILENAME,ios::<span class="keyword">in</span>);</span><br><span class="line"> 	<span class="keyword">if</span>(!file.is_open())</span><br><span class="line"> 	&#123;</span><br><span class="line"> 		cout&lt;&lt;<span class="string">"文件打开失败！"</span>&lt;&lt;endl;</span><br><span class="line"> 		<span class="built_in">return</span>;</span><br><span class="line">	 &#125;</span><br><span class="line">	 worker **array=new worker*[3];</span><br><span class="line"> 	<span class="keyword">while</span>(file&gt;&gt;num&amp;&amp;file&gt;&gt;name&amp;&amp;file&gt;&gt;id)</span><br><span class="line"> 	&#123;</span><br><span class="line"> 		worker *wk=NULL;</span><br><span class="line">		 switch(id)</span><br><span class="line">		 &#123;</span><br><span class="line">		 	<span class="keyword">case</span> 1:wk=new boss(num,name,id);<span class="built_in">break</span>;</span><br><span class="line">		 	<span class="keyword">case</span> 2:wk=new manage(num,name,id);<span class="built_in">break</span>;</span><br><span class="line">		 	<span class="keyword">case</span> 3:wk=new employee(num,name,id);<span class="built_in">break</span>;</span><br><span class="line">		 	default:cout &lt;&lt;<span class="string">"读取数据错误！"</span>&lt;&lt;endl; </span><br><span class="line">		 &#125;</span><br><span class="line">		</span><br><span class="line">		 array[i]=wk;</span><br><span class="line">		 i++;</span><br><span class="line">	 &#125;</span><br><span class="line">	 this-&gt;m_array=array;</span><br><span class="line">	 this-&gt;sum=i;</span><br><span class="line">	 file.close();</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> void workmanage::get_num()</span><br><span class="line"> &#123;</span><br><span class="line"> 	ifstream file;</span><br><span class="line"> 	int i=0;</span><br><span class="line"> 	int num,id;</span><br><span class="line"> 	string name;</span><br><span class="line"> 	file.open(FILENAME,ios::<span class="keyword">in</span>);</span><br><span class="line"> 	<span class="keyword">if</span>(!file.is_open())</span><br><span class="line"> 	&#123;</span><br><span class="line"> 		cout&lt;&lt;<span class="string">"文件打开失败！"</span>&lt;&lt;endl;</span><br><span class="line"> 		<span class="built_in">return</span>;</span><br><span class="line">	 &#125;</span><br><span class="line"> 	<span class="keyword">while</span>(file&gt;&gt;num&amp;&amp;file&gt;&gt;name&amp;&amp;file&gt;&gt;id)</span><br><span class="line"> 	&#123;</span><br><span class="line">		 i++;</span><br><span class="line">	 &#125;</span><br><span class="line"></span><br><span class="line">	 this-&gt;sum=i;</span><br><span class="line">	 file.close();</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> void workmanage::sort_xt()</span><br><span class="line"> &#123;</span><br><span class="line"> 	int i,j;</span><br><span class="line"> 	worker *wk=NULL;</span><br><span class="line"> 	<span class="keyword">for</span>(i=0;i&lt;this-&gt;sum;i++)</span><br><span class="line">	 &#123;</span><br><span class="line">	 	<span class="keyword">for</span>(j=0;j&lt;this-&gt;sum-i-1;j++)</span><br><span class="line">	 	<span class="keyword">if</span>(this-&gt;m_array[j]-&gt;m_num&gt;this-&gt;m_array[j+1]-&gt;m_num)</span><br><span class="line">	 	&#123;</span><br><span class="line">			wk=this-&gt;m_array[j];</span><br><span class="line">			this-&gt;m_array[j]=this-&gt;m_array[j+1];</span><br><span class="line">			this-&gt;m_array[j+1]=wk;</span><br><span class="line">		 &#125;</span><br><span class="line">	 &#125;</span><br><span class="line">	 this-&gt;show_xt();</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> void workmanage::clear_xt()</span><br><span class="line"> &#123;</span><br><span class="line"> 	cout&lt;&lt;<span class="string">"是否清空？：是(Y)/否（N）"</span>&lt;&lt;endl;</span><br><span class="line">	char ch;</span><br><span class="line">	int i;</span><br><span class="line">	cin &gt;&gt;ch;</span><br><span class="line">	<span class="keyword">if</span>(ch==<span class="string">'y'</span>||ch==<span class="string">'Y'</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		ofstream file(FILENAME,ios::trunc);</span><br><span class="line">		file.close();</span><br><span class="line">		<span class="keyword">for</span>(i=0;i&lt;this-&gt;sum;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(this-&gt;m_array[i]!=NULL)</span><br><span class="line">				delete this-&gt;m_array[i];</span><br><span class="line">		&#125;</span><br><span class="line">		delete[] this-&gt;m_array;</span><br><span class="line">		this-&gt;sum=0;</span><br><span class="line">		this-&gt;m_file=<span class="literal">true</span>; </span><br><span class="line">		this-&gt;m_array=NULL;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt;<span class="string">"清空失败！"</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> void workmanage::find_xt()</span><br><span class="line"> &#123;</span><br><span class="line"> 	int num,i,n=0;</span><br><span class="line"> 	cout &lt;&lt;<span class="string">"请输入要查找职工的编号："</span>;</span><br><span class="line">	cin &gt;&gt; num; </span><br><span class="line">	<span class="keyword">for</span>(i=0;i&lt;this-&gt;sum;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(this-&gt;m_array[i]-&gt;m_num==num)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt;<span class="string">"查找到该职工！"</span>&lt;&lt;endl;</span><br><span class="line">			this-&gt;m_array[i]-&gt;show();</span><br><span class="line">			n=1;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"> 	<span class="keyword">if</span>(n!=1)</span><br><span class="line"> 	&#123;</span><br><span class="line"> 		cout&lt;&lt;<span class="string">"未查找到该职工！"</span>&lt;&lt;endl;</span><br><span class="line">	 &#125;</span><br><span class="line"> 	</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> void  workmanage::delete_xt()</span><br><span class="line"> &#123;</span><br><span class="line"> 	cout &lt;&lt;<span class="string">"请输入要删除职工的编号："</span>;</span><br><span class="line"> 	int num,j,i,n;</span><br><span class="line">	cin &gt;&gt; num;</span><br><span class="line">	<span class="keyword">for</span>(i=0;i&lt;this-&gt;sum;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(this-&gt;m_array[i]-&gt;m_num==num)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt;<span class="string">"查找到该职工！"</span>&lt;&lt;endl;</span><br><span class="line">			this-&gt;m_array[i]-&gt;show();</span><br><span class="line">			n=1;</span><br><span class="line">			<span class="built_in">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"> 	<span class="keyword">if</span>(n!=1)</span><br><span class="line"> 	&#123;</span><br><span class="line"> 		cout&lt;&lt;<span class="string">"未查找到该职工！"</span>&lt;&lt;endl;</span><br><span class="line">	 &#125;</span><br><span class="line">	 <span class="keyword">else</span></span><br><span class="line">	 &#123;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span>(i==this-&gt;sum-1)</span><br><span class="line">			&#123;</span><br><span class="line">				delete this-&gt;m_array[this-&gt;sum-1];</span><br><span class="line">				this-&gt;m_array[this-&gt;sum-1]=NULL;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span>(j=i;j&lt;this-&gt;sum-1;j++)</span><br><span class="line">					&#123;</span><br><span class="line">						this-&gt;m_array[j]=this-&gt;m_array[j+1];</span><br><span class="line">					&#125;</span><br><span class="line">				//delete this-&gt;m_array[this-&gt;sum-1];</span><br><span class="line">				this-&gt;m_array[this-&gt;sum-1]=NULL;</span><br><span class="line">			&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">			this-&gt;sum--;</span><br><span class="line">	 &#125;</span><br><span class="line"> 	</span><br><span class="line"> 	this-&gt;save_xt();</span><br><span class="line"> 	cout &lt;&lt;<span class="string">"删除成功！"</span>&lt;&lt;endl;</span><br><span class="line"> 	</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> void workmanage::update_xt()</span><br><span class="line"> &#123;</span><br><span class="line"> 	cout &lt;&lt;<span class="string">"请输入要修改职工的编号："</span>;</span><br><span class="line"> 	int num,j,i=0,n=0,a[3]=&#123;0&#125;,id;</span><br><span class="line"> 	string name;</span><br><span class="line"> 	char ch=<span class="string">' '</span>;</span><br><span class="line"> 	worker *wk=NULL;</span><br><span class="line">	cin &gt;&gt; num;</span><br><span class="line">	<span class="keyword">for</span>(j=0;j&lt;this-&gt;sum;j++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(this-&gt;m_array[j]-&gt;m_num==num)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt;<span class="string">"查找到该职工！"</span>&lt;&lt;endl;</span><br><span class="line">			this-&gt;m_array[j]-&gt;show();</span><br><span class="line">			n=1;</span><br><span class="line">			<span class="built_in">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"> 	<span class="keyword">if</span>(n!=1)</span><br><span class="line"> 	&#123;</span><br><span class="line"> 		cout&lt;&lt;<span class="string">"未查找到该职工！"</span>&lt;&lt;endl;</span><br><span class="line">	 &#125;</span><br><span class="line">	 <span class="keyword">else</span></span><br><span class="line"> 	&#123;</span><br><span class="line"> 		cout &lt;&lt;<span class="string">"1,职工编号"</span>&lt;&lt;endl &lt;&lt;<span class="string">"2.职工姓名"</span> &lt;&lt;endl &lt;&lt;<span class="string">"3.职工部门"</span>&lt;&lt;endl; </span><br><span class="line"> 		cout &lt;&lt;<span class="string">"请输入要修改的项目：（可多选，用空格隔开）"</span>;</span><br><span class="line"> 		<span class="keyword">while</span>(ch==<span class="string">' '</span>&amp;&amp;i&lt;3)</span><br><span class="line"> 		&#123;</span><br><span class="line"> 			cin &gt;&gt;a[i];</span><br><span class="line"> 			ch = getchar();</span><br><span class="line"> 			i++;</span><br><span class="line">		 &#125;</span><br><span class="line">		 i=0;</span><br><span class="line">		<span class="keyword">while</span>(i&lt;3)</span><br><span class="line">		&#123;</span><br><span class="line">			switch(a[i])</span><br><span class="line">			&#123;	</span><br><span class="line">				<span class="keyword">case</span> 1:</span><br><span class="line">					cout &lt;&lt;<span class="string">"请输入修改后的职工编号："</span>;</span><br><span class="line">					cin &gt;&gt; num;</span><br><span class="line">					this-&gt;m_array[j]-&gt;m_num=num;</span><br><span class="line">					<span class="built_in">break</span>;</span><br><span class="line">				<span class="keyword">case</span> 2:</span><br><span class="line">					cout &lt;&lt;<span class="string">"请输入修改后的职工名称："</span>;</span><br><span class="line">					cin &gt;&gt; name;</span><br><span class="line">					this-&gt;m_array[j]-&gt;m_name=name;</span><br><span class="line">					<span class="built_in">break</span>;</span><br><span class="line">				<span class="keyword">case</span> 3:</span><br><span class="line">					cout &lt;&lt;<span class="string">"请输入修改后的职工部门："</span>&lt;&lt;endl;</span><br><span class="line">					cout &lt;&lt;<span class="string">"1.老板"</span>&lt;&lt;endl &lt;&lt;<span class="string">"2.经理"</span>&lt;&lt;endl&lt;&lt;<span class="string">"3.普通员工"</span>&lt;&lt;endl;</span><br><span class="line">					cin &gt;&gt; id;</span><br><span class="line">					<span class="keyword">if</span>(id == 1)</span><br><span class="line">					&#123;</span><br><span class="line">						wk=new boss(this-&gt;m_array[j]-&gt;m_num,this-&gt;m_array[j]-&gt;m_name,id); </span><br><span class="line">					 &#125;<span class="keyword">else</span> <span class="keyword">if</span>(id == 2)</span><br><span class="line">					 &#123;</span><br><span class="line">					 	wk=new manage(this-&gt;m_array[j]-&gt;m_num,this-&gt;m_array[j]-&gt;m_name,id); </span><br><span class="line">					 &#125;</span><br><span class="line">					 <span class="keyword">else</span> <span class="keyword">if</span>(id == 3)</span><br><span class="line">					 &#123;</span><br><span class="line">					 	wk=new employee(this-&gt;m_array[j]-&gt;m_num,this-&gt;m_array[j]-&gt;m_name,id); </span><br><span class="line">					 &#125;</span><br><span class="line">					 <span class="keyword">else</span></span><br><span class="line">					 &#123;</span><br><span class="line">					 	cout &lt;&lt; <span class="string">"输入错误"</span>&lt;&lt;endl;</span><br><span class="line">						<span class="built_in">return</span>; </span><br><span class="line">					 &#125;</span><br><span class="line">					this-&gt;m_array[j]=wk;</span><br><span class="line"> 					<span class="built_in">break</span>;</span><br><span class="line">				<span class="keyword">case</span> 0:<span class="built_in">break</span>;</span><br><span class="line">				default:cout &lt;&lt;<span class="string">"输入错误！"</span> &lt;&lt;endl;<span class="built_in">return</span>; </span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">			i++;</span><br><span class="line">		&#125;</span><br><span class="line">	 &#125; </span><br><span class="line">	 this-&gt;save_xt();</span><br><span class="line">	 cout &lt;&lt;<span class="string">"修改成功"</span> &lt;&lt;endl; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>-C/C++项目</tag>
      </tags>
  </entry>
  <entry>
    <title>C++11新特性讲解</title>
    <url>/2020/06/16/c-c-practice03/</url>
    <content><![CDATA[<p>本文对C++11的新特性进行讲解，有详细的代码介绍以及用法，帮助你们学习。话不多说，直接开始。</p>
<h2 id="auto-amp-decltype"><a href="#auto-amp-decltype" class="headerlink" title="auto &amp; decltype"></a>auto &amp; decltype</h2><p>关于C++11的新特性，最先提到的肯定是自动类型推导，很方便。C++11引入了auto和decltype关键字，使用它们可以让编译器在编译阶段自动推导出变量或者表达式的类型，对于C++开发人员来说简直就是一大福音呀。</p>
<ul>
<li>auto:让编译器在编译阶段就推导出变量的类型，可以通过赋值运算符=右边的类型推导出变量的类型。<br>例如：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> i = <span class="number">10</span>;  <span class="comment">//推导出10为int型，所以auto为int型</span></span><br></pre></td></tr></table></figure>

<ul>
<li>decltype：与auto不同的是decltype用于推导表达式的类型，编译器会分析表达式的类型，但并不会执行表达式。<br>例如：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">decltype</span>(i) b = <span class="number">2</span>;   <span class="comment">//decltype推导出i的类型为const int 则b类型也为const int.</span></span><br></pre></td></tr></table></figure>
<h2 id="右值引用"><a href="#右值引用" class="headerlink" title="右值引用"></a>右值引用</h2><p>C++11新增加了右值引用，先讲概念：<br>右值：没有名字，不能对其进行取址操作，通常用来保存临时变量。<br>右值引用就是对右值进行引用的类型。右值引用支持完美转发和移动语义。<br>移动语义：转移资源的所有权。<br>完美转发：可以写一个接受任意实参的函数模板，并转发到其他函数，目标函数会收到与转发函数相同的实参。<br>使用右值引用可以减少不必要的拷贝，性能更加优化。</p>
<h2 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h2><p>在C++11中可以直接在变量名后面加上初始化列表来进行对象的初始化。<br>例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	student(<span class="built_in">string</span> name_h,<span class="keyword">int</span> age_h):name(name_h),age(age_h)&#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">string</span> name;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">student <span class="title">std</span><span class="params">(<span class="string">"xiaoming"</span>,<span class="number">18</span>)</span></span>;</span><br><span class="line">	student std1 = &#123;<span class="string">"xiaohong"</span>,<span class="number">24</span>&#125;;</span><br><span class="line">	student std2&#123;<span class="string">"xiaohei"</span>,<span class="number">21</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//也可以使用在返回值</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="function-amp-bind-amp-lambda表达式"><a href="#function-amp-bind-amp-lambda表达式" class="headerlink" title="function &amp; bind &amp; lambda表达式"></a>function &amp; bind &amp; lambda表达式</h2><ul>
<li>function函数</li>
</ul>
<p>function可以看作是一个函数对象，用于对这个函数的抽象概念。function的实例对象可以存储、赋值和调用任何可以调用的对象（函数指针，伪函数,lambda等等）；<br>例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line">function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>,<span class="keyword">int</span>)&gt; f = func;</span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">function&lt;<span class="keyword">void</span>(<span class="keyword">int</span> a,<span class="keyword">int</span> b)&gt; f1 = [](<span class="keyword">int</span> a,<span class="keyword">int</span> b)&#123;<span class="keyword">return</span> a+b;&#125;;</span><br><span class="line">f1(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<p>从上面可以看到function的使用方法，当对function填入合适的参数表和返回值后，它就变成了可以容纳所有这一类调用方式的函数封装器，可以作为回调函数。</p>
<ul>
<li>bind函数</li>
</ul>
<p>bind函数可以将可调用对象和参数一起绑定，绑定后的结果可以使用function函数保存。通常与placeholdors占位符一起使用，有两大作用：</p>
<ul>
<li>将可调用对象和参数绑定。</li>
<li>可以将n元对象转为m（m&lt;n）元可调用对象。<br>例如：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">""</span>&lt;&lt;b&lt;&lt;<span class="string">""</span>&lt;&lt;c&lt;&lt;<span class="string">""</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">auto</span> func1 = bind(func,placeholdors::_1,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">	func1(<span class="number">3</span>);			<span class="comment">//相当于func(3,1,2);</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">auto</span> func1 = bind(func,placeholdors::_1,placeholdors::_2,<span class="number">2</span>);</span><br><span class="line">	func1(<span class="number">3</span>,<span class="number">2</span>);			<span class="comment">//相当于func(3,2,2);</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">auto</span> func1 = bind(func,placeholdors::_1,placeholdors::_2,placeholdors::_3);</span><br><span class="line">	func1(<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>);		<span class="comment">//相当于func(3,2,1);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>lambda表达式</li>
</ul>
<p>lambda表达式定义了一个匿名函数，可以捕获一定范围的变量在函数内部使用。<br>例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> func = [](<span class="keyword">int</span> a,<span class="keyword">int</span> b)&#123;<span class="keyword">return</span> a+b;&#125;;</span><br></pre></td></tr></table></figure>
<p>[]内可以捕获变量，使用&amp;或者=或者直接输入变量名。</p>
<h2 id="锁机制-amp-多线程"><a href="#锁机制-amp-多线程" class="headerlink" title="锁机制&amp;多线程"></a>锁机制&amp;多线程</h2><p>c++11增加了许多并发相关的东西，比如说</p>
<ul>
<li>thread相关，多线程</li>
<li>mutex相关，互斥锁</li>
<li>lock相关，锁</li>
<li>atomic相关，原子变量等等</li>
<li>condition_variable相关，条件变量等等<h2 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h2>说到c++最让程序员头痛的莫过于内存管理了，经常内存泄漏。c++11引入了智能指针来解决内存泄漏的问题。c++11引入了三种新的智能指针。</li>
<li>unique_ptr:独享式智能指针，不能复制与赋值，同一时间类只能有一个unique_ptr指向该对象，可以使用move()转移对象的所有权。</li>
<li>shared_ptr:共享式智能指针，支持复制与赋值，可以多个智能指针指向该对象，只有最后一个指针才会释放资源。使用计数技术来表明有多少个指针共享该资源。</li>
<li>weak_ptr:它是对对象的弱引用，不会增加对象的引用计数，可以与shared_ptr相互转换，shared_ptr可以直接赋值给它，它可以通过调用lock函数来获得shared_ptr。</li>
</ul>
<p>如果shared_ptr指针相互引用的话仍然会造成内存泄漏，可以使用weak_ptr解决。</p>
<h2 id="基于范围的for循环"><a href="#基于范围的for循环" class="headerlink" title="基于范围的for循环"></a>基于范围的for循环</h2><p>例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> x:vec)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="nullptr"><a href="#nullptr" class="headerlink" title="nullptr"></a>nullptr</h2><p>nullptr是C++11用来表示空指针新引入的常量值，在C++用来表示空指针语义时建议使用nullptr而不要使用NULL，因为NULL本质上是int型的0，不是个空指针。</p>
<h2 id="C-11关键字"><a href="#C-11关键字" class="headerlink" title="C++11关键字"></a>C++11关键字</h2><ul>
<li>final:用于修饰一个类，表示禁止该类进一步派生和虚函数的进一步重载。<ul>
<li>override:用于修饰派生类中的成员函数，表明该函数重写了基类函数。</li>
<li>default:用于生成默认构造函数。</li>
<li>delete:禁止生成默认构造函数</li>
<li>explicit:作用于修饰构造函数，表示只能显示构造，不可以被隐式转换。<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">peopel</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		people()&#123;&#125;;</span><br><span class="line">		people(people &amp;)&#123;&#125;;</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		<span class="built_in">string</span> name;</span><br><span class="line">		<span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span>:</span><span class="keyword">public</span> people</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">explicit</span> <span class="title">student</span><span class="params">()</span> </span>= <span class="keyword">default</span>;</span><br><span class="line">		student(student &amp;)=<span class="keyword">delete</span>;</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> <span class="keyword">override</span></span>&#123;&#125;;</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		<span class="built_in">string</span> name;</span><br><span class="line">		<span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	studnet <span class="built_in">std</span> = &#123;<span class="string">"xiaoming"</span>,<span class="number">12</span>&#125;; 		<span class="comment">//error，不能隐式转换</span></span><br><span class="line">	<span class="function">studnet <span class="title">std1</span><span class="params">(<span class="string">"xiaohei"</span>,<span class="number">13</span>)</span></span>;			<span class="comment">//OK</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
好了，就写这么多吧，相信各位看完后一定会有所收获的。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>-C/C++实战 -C/C++训练 -C/C++ -系统</tag>
      </tags>
  </entry>
  <entry>
    <title>安装centos问题及解决方法</title>
    <url>/2020/06/15/c-c-practice04/</url>
    <content><![CDATA[<p>我们在安装虚拟机时可能会出现这样的问题：加载时进不去虚拟机桌面，如下图。<br><img src="https://img-blog.csdnimg.cn/20200311133003319.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1cG1hbmE=,size_16,color_FFFFFF,t_70" alt="问题图片"><br>虚拟机会一直卡在这个界面进不去，请按下F2可以查看虚拟机加载情况，如下图。</p>
<p><img src="https://img-blog.csdnimg.cn/20200311133131251.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1cG1hbmE=,size_16,color_FFFFFF,t_70" alt="加载情况"><br>如果是上图出现的问题，请继续看下去。</p>
<p>解决方法如下：</p>
<ul>
<li><p>先关闭虚拟机，点击编辑虚拟机位置。<br><img src="https://img-blog.csdnimg.cn/2020031113340797.PNG" alt="虚拟机位置"></p>
</li>
<li><p>进入以下界面。<img src="https://img-blog.csdnimg.cn/20200311134421267.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1cG1hbmE=,size_16,color_FFFFFF,t_70" alt="界面"></p>
</li>
<li><p>随后点击网络配置器，在点击下面的移除，记住要点击确定保存即可。</p>
</li>
<li><p>在重新开启虚拟机，即可进入虚拟机。如下：<img src="https://img-blog.csdnimg.cn/20200311134855553.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1cG1hbmE=,size_16,color_FFFFFF,t_70" alt="虚拟机界面"></p>
</li>
<li><p>但是现在虚拟机是没有网卡的，俗话说就是不能上网，所以这是没有用的。所以还要继续配置。</p>
</li>
<li><p>接下来退出虚拟机，一定在虚拟机图形界面上关机。如下图：</p>
</li>
<li><p><img src="https://img-blog.csdnimg.cn/20200311135143985.PNG" alt="关机"><br><img src="https://img-blog.csdnimg.cn/20200311135202397.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1cG1hbmE=,size_16,color_FFFFFF,t_70" alt="关机重启"></p>
</li>
<li><p>关机后再点击编辑虚拟机位置。再添加网络配置器，操作如下图：<img src="https://img-blog.csdnimg.cn/202003111353372.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1cG1hbmE=,size_16,color_FFFFFF,t_70" alt="添加"><br>当然网络连接模式最好填主机模式，其他也可以。</p>
</li>
<li><p>最后点击确定，保存配置。</p>
</li>
<li><p>最后再开启虚拟机即可。如下图：<br><img src="https://img-blog.csdnimg.cn/20200311135553816.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1cG1hbmE=,size_16,color_FFFFFF,t_70" alt="成功"><br>现在就可以正常使用Centos虚拟机了，若以上操作还不能解决，可能是VM的版本问题。如以上操作有什么问题。请在下面评论，谢谢。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>-Liunx</tag>
      </tags>
  </entry>
</search>
